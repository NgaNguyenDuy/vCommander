#!/usr/bin/env node

var program = require('commander'),
    mkdirp = require('mkdirp'),
    fs = require('fs'),
    path = require('path'),
    pkg = require('../package.json'),
    colors = require('colors'),
    version = pkg.version;

// var rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout
// });



program
    .version(version)
    .usage('[options] [dir]')
    .option('    --force', 'force create server on non-empty server');

program.on('--help', function() {
    console.log('  Example: ');
    console.log('');
    console.log('     $ vsoft createServer');
    console.log('');
});
//    .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
program.parse(process.argv);

// console.log('  - %s cheese', program.cheese);


var despath = program.args.shift() || '.';


var app_name = path.basename(path.resolve(despath));

(function createApp(path) {
    emptyDir(path, function(empty) {
        if(empty || program.force) {
            createServerAt(path);
        } else {
            abort('Aborting');
            // program.confirm('des not empty', function(ok) {
            //     if(ok) {
            //         process.stdin.destroy();
            //         createServerAt(path);

            //     } else {
            //         abort('Aborting');
            //     }
            // });
        }
    });
})(despath);


var auth = load_template('boot/auth.js');
var root = load_template('boot/root.js');
var explorer = load_template('boot/explorer.js');
var restapi = load_template('boot/rest-api.js');
var app = fs.readFileSync(__dirname + '/../templates/app.js', 'utf-8');

function createServerAt(path) {
    console.log();
    process.on('exit', function() {
        console.log();
        console.log('    To install dependencies:');
        console.log('      $ cd %s && npm install', path);
        console.log();
        console.log('    Run the app: ');
        console.log('      $ DEBUG=' + app_name + ' npm start');
        console.log();
    });

    mkdir(path, function() {
        write(path + '/server.js', app);
        write(path + '/package.json', JSON.stringify(pkgj, null, 2));
        write(path + '/config.json', JSON.stringify(cfg, null, 2));
        write(path + '/datasources.json', JSON.stringify(ds, null, 2));
        write(path + '/model-config.json', JSON.stringify(modelCfg, null, 2));
        mkdir(path + '/common/models');
        mkdir(path + '/boot', function(){
            write(path + '/boot/auth.js', auth);
            write(path + '/boot/root.js', root);
            write(path + '/boot/explorer.js', explorer);
            write(path + '/boot/rest-api.js', restapi);
        });
    });
};


var ds = {
    "db": {
        "name": "db",
        "connector": "memory"
    }
};

var modelCfg = {
    "_meta": {
        "sources": [
            "../common/models",
            "./models"
        ]
    },
    "User": {
        "dataSource": "db"
    },
    "AccessToken": {
        "dataSource": "db",
        "public": false
    },
    "ACL": {
        "dataSource": "db",
        "public": false
    },
    "RoleMapping": {
        "dataSource": "db",
        "public": false
    },
    "Role": {
        "dataSource": "db",
        "public": false
    }
};


var pkgj = {
    name : app_name,
    version: '0.0.1',
    private: true,
    scripts: {
        start: 'node server.js'
    },
    dependencies: {
        'express' : '~4.9.0',
        'errorhandler': '^1.2.2',
        'vsoft-datasource-juggler': '^2.10.1',
        'serve-favicon': '^2.1.6',
        'vf': '*',
        'vsoft-boot': '0.x'
    }
};

var cfg = {
    'restApiRoot': '/api',
    'host': '0.0.0.0',
    'port': 8888,
    'url': 'http://localhost:8888'
};


function mkdir(path, fn) {
    mkdirp(path, 0755, function(err) {
        if(err) throw err;
        // console.log(' \033[36mcreate\033[0m : ' + path);
        console.log(' create : '.bold.blue + path);
        fn && fn();
    });
}

function write(path, str, mode) {
    fs.writeFile(path, str, {mode: mode || 0666});
    // console.log(' \x1b[36mcreate\x1b[0m : ' + path);
    console.log(' create : '.bold.blue + path);
}

function emptyDir(path, fn) {
    fs.readdir(path, function(err, file) {
        if(err && 'ENOENT' != err.code) throw err;
        fn(!file || !file.length);
    });
};

function load_template(name) {
    return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}



// rl.question("What do you think of node.js? ", function(answer) {
//   // TODO: Log the answer in a database
//   console.log("Thank you for your valuable feedback:", answer);

//   rl.close();
// });


// function promptMultiLine(str, fn) {
//     var buf = [];
//     console.log(str);
//     process.stdin.setEncoding('utf8');
//     process.stdin.on('data', function(val) {
//         if('\n' == val || '\r\n' == val) {
//             fn(buf.join('\n'));
//         } else {
//             buf.push(val);
//         }
//     }).resume();
// }

// promptMultiLine('hehe', function(data) {
//     console.log(data);
// });

// function prompt (str, fn) {

// }

// function confirm(str, fn) {
//     // rl.question(str, function(answer) {

//     // }) ;
// };

function abort(str) {
    console.error(str);
    process.exit(1);
}
